ext {
    /**
     * Bağımlılıkları versiyonlama işlemleri:
     */
    versions = [
            springBoot                : "3.2.2",
            lombok                    : "1.18.34",
            mapStruct                 : "1.5.5.Final",
            postgreSql                : "42.7.3",
            swaggerApi                : "2.3.0",
            jwt                       : "4.4.0",
            mySql                     : "8.4.0",

            springCloud               : "4.1.0",

            springCloudCircuitBreaker : "3.1.0"
    ]


    /**
     * Bu kısımda bağımlılık listesini oluştracağız. K:V
     * 1. bağımlılığa bir ad belirle
     * 2. iki nokta üst üste(:)
     * 3. Projenin group idsini yazın.
     * 4. iki nokta üst üste(:)
     * 5. Projenin artifact id'sini yazın.
     * 6. iki nokta üst üste(:)
     * 7. Versiyon numarasını veya yukarıda belirttiğimiz key değerini çağır.
     */
    libs = [
            springBootWeb                   : "org.springframework.boot:spring-boot-starter-web:$versions.springBoot",
            springBootDataJpa               : "org.springframework.boot:spring-boot-starter-data-jpa:$versions.springBoot",

            postgreSql                      : "org.postgresql:postgresql:$versions.postgreSql",
            lombok                          : "org.projectlombok:lombok:$versions.lombok",
            mapStruct                       : "org.mapstruct:mapstruct:$versions.mapStruct",
            mapStructProcessor              : "org.mapstruct:mapstruct-processor:$versions.mapStruct",
            swaggerApi                      : "org.springdoc:springdoc-openapi-starter-webmvc-ui:$versions.swaggerApi",
            jwt                             : "com.auth0:java-jwt:$versions.jwt",
            mySql                           : "com.mysql:mysql-connector-j:$versions.mySql",

            springCloudOpenFeign            : "org.springframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",

            springCloudStarterConfig        : "org.springframework.cloud:spring-cloud-starter-config:$versions.springCloud",
            springCloudConfigServer         : "org.springframework.cloud:spring-cloud-config-server:$versions.springCloud",

            springCloudConfigClient         : "org.springframework.cloud:spring-cloud-config-client:$versions.springCloud",

            springCloudGateway              : "org.springframework.cloud:spring-cloud-starter-gateway:$versions.springCloud",


            springCloudCircuitBreaker        : "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$versions.springCloudCircuitBreaker",
            springCloudCircuitBreakerReactor : "org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:$versions.springCloudCircuitBreaker",

            springBootActuator               : "org.springframework.boot:spring-boot-starter-actuator:$versions.springBoot",
            springBootValidation             : "org.springframework.boot:spring-boot-starter-validation:$versions.springBoot",

            // Zipkin
            micrometerTracingBridgeBrave : "io.micrometer:micrometer-tracing-bridge-brave",
            zipkinReporterBrave : "io.zipkin.reporter2:zipkin-reporter-brave",
            micrometerObservation : "io.micrometer:micrometer-observation",

            springBootAmqp                  : "org.springframework.boot:spring-boot-starter-amqp:$versions.springBoot",


            springCloudAdminStarterServer   : "de.codecentric:spring-boot-admin-starter-server:3.2.2",
            springCloudEurekaServer         : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:$versions.springCloud",
            springCloudEurekaClient         : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$versions.springCloud"

    ]
}


